import { Connection, Keypair, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL } from "@solana/web3.js";
import bs58 from "bs58";
import * as dotenv from "dotenv";
import * as path from "path";

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
dotenv.config({ path: path.join(__dirname, '.env') });

/**
 * üîë –î–û–ù–û–†–°–¨–ö–ò–ô WALLET (Base58 —Ñ–æ—Ä–º–∞—Ç) - —á–∏—Ç–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ ENV
 */
const DONOR_WALLET_SECRET_BASE58 = process.env.DONOR_WALLET_PRIVATE_KEY!;

let donorWallet: Keypair | null = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–æ–Ω–æ—Ä—Å—å–∫–∏–π wallet
 */
function initDonorWallet(): Keypair {
    if (!donorWallet) {        
        donorWallet = Keypair.fromSecretKey(bs58.decode(DONOR_WALLET_SECRET_BASE58));
        console.log("üí∞ Donor wallet loaded:", donorWallet.publicKey.toBase58());
    }
    return donorWallet;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –±–∞–ª–∞–Ω—Å –¥–æ–Ω–æ—Ä—Å—å–∫–æ–≥–æ wallet'–∞
 */
export async function checkDonorBalance(connection: Connection): Promise<number> {
    const donor = initDonorWallet();
    const balance = await connection.getBalance(donor.publicKey);
    const solBalance = balance / LAMPORTS_PER_SOL;
    const minimumBalance = parseFloat(process.env.MINIMUM_DONOR_BALANCE!);
    
    console.log(`üí∞ Donor wallet balance: ${solBalance} SOL`);
    
    if (solBalance < minimumBalance) {
        console.warn("‚ö†Ô∏è LOW BALANCE! Please airdrop SOL to donor wallet:");
        console.warn(`   solana airdrop 2 ${donor.publicKey.toBase58()} --url devnet`);
    }
    
    return solBalance;
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î SOL –∑ –¥–æ–Ω–æ—Ä—Å—å–∫–æ–≥–æ wallet'–∞ –Ω–∞ —Ü—ñ–ª—å–æ–≤–∏–π
 */
export async function fundWallet(
    connection: Connection, 
    targetWallet: PublicKey, 
    solAmount?: number
): Promise<void> {
    const defaultAmount = parseFloat(process.env.DEFAULT_FUNDING_AMOUNT!);
    const actualAmount = solAmount || defaultAmount;
    const donor = initDonorWallet();
    const lamports = Math.floor(actualAmount * LAMPORTS_PER_SOL);
    
    console.log(`üîÑ Funding ${targetWallet.toBase58().slice(0, 8)}... with ${actualAmount} SOL`);
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å —Ü—ñ–ª—å–æ–≤–æ–≥–æ wallet'–∞
        const currentBalance = await connection.getBalance(targetWallet);
        const currentSol = currentBalance / LAMPORTS_PER_SOL;
        
        if (currentSol >= actualAmount) {
            console.log(`‚úÖ Target wallet already has ${currentSol} SOL (enough)`);
            return;
        }
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ SOL
        const transaction = new Transaction().add(
            SystemProgram.transfer({
                fromPubkey: donor.publicKey,
                toPubkey: targetWallet,
                lamports: lamports,
            })
        );
        
        const signature = await connection.sendTransaction(transaction, [donor]);
        await connection.confirmTransaction(signature, 'confirmed');
        
        const newBalance = await connection.getBalance(targetWallet);
        const newSol = newBalance / LAMPORTS_PER_SOL;
        
        console.log(`‚úÖ Funded successfully! New balance: ${newSol} SOL`);
        
    } catch (error) {
        console.error(`‚ùå Failed to fund wallet:`, error);
        throw error;
    }
}

/**
 * –ú–∞—Å–æ–≤–æ —Ñ—É–Ω–¥–∏—Ç—å –∫—ñ–ª—å–∫–∞ wallet'—ñ–≤
 */
export async function fundMultipleWallets(
    connection: Connection,
    wallets: PublicKey[],
    solAmountEach?: number
): Promise<void> {
    const defaultAmount = parseFloat(process.env.DEFAULT_FUNDING_AMOUNT!);
    const actualAmount = solAmountEach || defaultAmount;
    
    console.log(`üöÄ Funding ${wallets.length} wallets with ${actualAmount} SOL each...`);
    
    await checkDonorBalance(connection);
    
    for (let i = 0; i < wallets.length; i++) {
        await fundWallet(connection, wallets[i], actualAmount);
        
        // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
        if (i < wallets.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
    
    console.log("üéâ All wallets funded successfully!");
}

/**
 * –ó–±–∏—Ä–∞—î –∑–∞–ª–∏—à–∫–∏ SOL –∑ wallet'–∞ –Ω–∞–∑–∞–¥ –Ω–∞ –¥–æ–Ω–æ—Ä—Å—å–∫–∏–π wallet
 */
export async function collectSOLFromWallet(
    connection: Connection,
    sourceWallet: Keypair,
    keepAmount: number = 0.01 // –ó–∞–ª–∏—à–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∞–∫–∞—É–Ω—Ç—ñ–≤
): Promise<void> {
    const donor = initDonorWallet();
    
    try {
        const balance = await connection.getBalance(sourceWallet.publicKey);
        const solBalance = balance / LAMPORTS_PER_SOL;
        
        if (solBalance <= keepAmount) {
            console.log(`‚ÑπÔ∏è Wallet ${sourceWallet.publicKey.toBase58().slice(0, 8)} has only ${solBalance} SOL (keeping it)`);
            return;
        }
        
        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ (–∑–∞–ª–∏—à–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –¥–ª—è rent exemption)
        const rentExemption = 0.002; // ~0.002 SOL –¥–ª—è rent exemption
        const amountToReturn = solBalance - keepAmount - rentExemption;
        
        if (amountToReturn <= 0) {
            console.log(`‚ÑπÔ∏è Nothing to collect from ${sourceWallet.publicKey.toBase58().slice(0, 8)}`);
            return;
        }
        
        const lamportsToReturn = Math.floor(amountToReturn * LAMPORTS_PER_SOL);
        
        console.log(`üîÑ Collecting ${amountToReturn.toFixed(4)} SOL from ${sourceWallet.publicKey.toBase58().slice(0, 8)}...`);
        
        const transaction = new Transaction().add(
            SystemProgram.transfer({
                fromPubkey: sourceWallet.publicKey,
                toPubkey: donor.publicKey,
                lamports: lamportsToReturn,
            })
        );
        
        const signature = await connection.sendTransaction(transaction, [sourceWallet]);
        await connection.confirmTransaction(signature, 'confirmed');
        
        const newDonorBalance = await connection.getBalance(donor.publicKey);
        console.log(`‚úÖ Collected! Donor balance: ${(newDonorBalance / LAMPORTS_PER_SOL).toFixed(4)} SOL`);
        
    } catch (error) {
        console.warn(`‚ö†Ô∏è Failed to collect SOL from ${sourceWallet.publicKey.toBase58().slice(0, 8)}:`, error);
    }
}

/**
 * –ó–±–∏—Ä–∞—î –∑–∞–ª–∏—à–∫–∏ SOL –∑ –º–∞—Å–∏–≤—É wallet'—ñ–≤
 */
export async function collectSOLFromMultipleWallets(
    connection: Connection,
    wallets: Keypair[],
    keepAmountEach: number = 0.01
): Promise<void> {
    console.log(`üîÑ Collecting SOL from ${wallets.length} test wallets...`);
    
    let totalCollected = 0;
    const donor = initDonorWallet();
    const initialDonorBalance = await connection.getBalance(donor.publicKey);
    
    for (const wallet of wallets) {
        await collectSOLFromWallet(connection, wallet, keepAmountEach);
        
        // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    const finalDonorBalance = await connection.getBalance(donor.publicKey);
    totalCollected = (finalDonorBalance - initialDonorBalance) / LAMPORTS_PER_SOL;
    
    console.log(`üéâ Collection completed! Total collected: ${totalCollected.toFixed(4)} SOL`);
    console.log(`üí∞ Final donor balance: ${(finalDonorBalance / LAMPORTS_PER_SOL).toFixed(4)} SOL`);
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –ø–æ–∫–∞–∑—É—î –∑–∞–ª–∏—à–∫–∏ –≤—Å—ñ—Ö wallet'—ñ–≤
 */
export async function showWalletBalances(
    connection: Connection, 
    wallets: { name: string; keypair: Keypair }[]
): Promise<void> {
    console.log("üí∞ Wallet balances:");
    
    for (const { name, keypair } of wallets) {
        try {
            const balance = await connection.getBalance(keypair.publicKey);
            const solBalance = balance / LAMPORTS_PER_SOL;
            console.log(`   ${name}: ${solBalance.toFixed(4)} SOL`);
        } catch (error) {
            console.log(`   ${name}: Error reading balance`);
        }
    }
}